# Строки и методы str в Python

# 1. Создание строки
text = "Привет, мир!"
print(type(text))  # <class 'str'> - строка это объект класса str

# 2. Доступ к символам строки
# Индексация начинается с 0
print(text[0])  # 'П' - первый символ строки
print(text[5])  # 'т' - шестой символ строки

# 3. Срезы строк
# Срезы позволяют получать подстроки
print(text[1:5])  # 'риве' - срез с 2-го по 5-й символы
print(text[:7])  # 'Привет,' - срез с начала до 7-го символа
print(text[7:])  # 'мир!' - срез с 8-го символа до конца

# 4. Длина строки
# Функция len() возвращает количество символов в строке
print(len(text))  # 12 - длина строки "Привет, мир!"

# 5. Методы строк
# Методы строк позволяют выполнять различные операции над строками
print(text.upper())  # 'ПРИВЕТ, МИР!' - все символы в верхнем регистре
print(text.lower())  # 'привет, мир!' - все символы в нижнем регистре
print(text.replace("мир", "Вселенная"))  # 'Привет, Вселенная!' - замена подстроки

# Дополнительные примеры работы со строками

# Проверка наличия подстроки в строке
s = 'stroka texta'
print('str' in s)  # True - 'str' есть в строке s
print('sto' in s)  # False - 'sto' нет в строке s

# Преобразование первого символа в верхний регистр
s = "stroka texta"
print(s.capitalize())  # 'Stroka texta' - первый символ в верхнем регистре

# Замена одного символа или подстроки на другую
path = 'C:/Users/PyHS/Desktops/s.py'
path_1 = path.replace('/', '\\')  # Замена всех '/' на '\'
print(path_1)  # 'C:\Users\PyHS\Desktops\s.py'

# Разбиение строки на список подстрок по разделителю
r = path_1.split('\\')  # Разбиение строки по '\'
print(r)  # ['C:', 'Users', 'PyHS', 'Desktops', 's.py']
print(r[-1])  # 's.py' - последний элемент списка, имя файла

# Чтение из файла и удаление нежелательных символов
with open("text.txt", encoding="utf-8") as f:
    text = f.read()

list_znk = ["(", ")", '"', "\n"]
# Удаление всех символов из list_znk из текста
for znk in list_znk:
    text = text.replace(znk, " ")

# Разбиение текста на слова и вывод списка слов
t = text.split()
print(t)  # Вывод списка слов без скобок, кавычек и символов переноса строки

'''
Для улучшения кода, который читает текст из файла, удаляет из него определённые символы и затем соединяет 
слова обратно, можно сделать следующее:

1. Использовать with блок для обоих чтения и записи файлов, чтобы убедиться, 
что файлы корректно закрываются после использования.
2. Использовать строковый метод translate() вместо множественных вызовов replace() для более эффективного 
удаления символов.
3. Чтобы удалить пробелы и лишние запятые после удаления символов, можно использовать 
методы строк strip() и split(), а затем join().
'''

# пример кода:
# Удаляем символы: скобки, кавычки и символы новой строки
with open("text.txt", encoding="utf-8") as f:
    text = f.read()

# Используем translate для удаления нежелательных символов
translation_table = str.maketrans('', '', '()"')
cleaned_text = text.translate(translation_table).replace("\n", " ")

print(cleaned_text)  # Выводим очищенный текст

# Разделяем текст на слова, удаляем запятые и лишние пробелы, и соединяем слова обратно
words = [word.strip(",") for word in cleaned_text.split()]
new_text = ' '.join(words)

print(new_text)  # Выводим обработанный текст без лишних символов и пробелов
