# Оператор raise в Python

# Оператор raise используется для возбуждения исключений, что позволяет контролировать
# поведение программы при возникновении ошибок или непредвиденных ситуаций.

# Возбуждение стандартного исключения ValueError, если b равно 0:
def divide(a, b):
    if b == 0:
        raise ValueError("Деление на ноль недопустимо")
    return a / b


# Пример обработки исключения с помощью блока try-except:
try:
    result = divide(10, 0)
except ValueError as e:
    print(e)


# Создание пользовательского класса исключений для специфических ошибок:
class MyCustomException(Exception):
    def __init__(self, message, code):
        super().__init__(message)
        self.code = code  # Дополнительный атрибут для хранения кода ошибки


# Возбуждение пользовательского исключения с дополнительной информацией:
def process_data(data):
    if not data:
        raise MyCustomException("Пустые данные обнаружены", code=400)


# Обработка пользовательского исключения:
try:
    data = []
    process_data(data)
except MyCustomException as e:
    print(f"{e} - Код ошибки: {e.code}")

# Использование оператора raise обеспечивает более понятный и управляемый код,
# а также улучшает взаимодействие с пользователем программы за счет точной передачи информации об ошибках.

# Документирование исключений помогает разработчикам понимать, какие ошибки могут возникнуть,
# и планировать их корректную обработку, обеспечивая надежность и стабильность программы.
