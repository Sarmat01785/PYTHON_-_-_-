# Оператор raise в Python

# Оператор raise используется для возбуждения исключений в Python.
# Это позволяет программисту заставить программу сообщить о возникновении ошибки или непредвиденной ситуации.

# Возбуждение встроенного исключения ValueError:
def divide(a, b):
    if b == 0:
        # Использование raise для возбуждения исключения с сообщением об ошибке
        raise ValueError("Деление на ноль недопустимо")
    return a / b


# Пример обработки исключения в блоке try-except
try:
    result = divide(10, 0)
except ValueError as e:
    print(e)  # Выведет сообщение об ошибке: Деление на ноль недопустимо


# Создание собственного класса исключений
class MyCustomException(Exception):
    # Конструктор класса может быть расширен для приема дополнительных параметров
    def __init__(self, message, code):
        super().__init__(message)
        self.code = code


# Возбуждение собственного исключения с дополнительной информацией
def process_data(data):
    if not data:
        # Передаем пользовательское сообщение и код исключения
        raise MyCustomException("Пустые данные обнаружены", code=400)


try:
    data = []
    process_data(data)
except MyCustomException as e:
    # Обращаемся к атрибуту code нашего исключения
    print(f"{e} - Код ошибки: {e.code}")

# Оператор raise позволяет программистам обеспечить корректное управление ошибками и исключительными ситуациями,
# а также делает код более предсказуемым и безопасным для использования.

# Документация исключений в коде также важна, чтобы другие разработчики понимали,
# какие ошибки могут возникнуть и как их следует обрабатывать.
