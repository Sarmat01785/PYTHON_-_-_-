# Декораторы в Python - это мощный инструмент, который позволяет
# изменять поведение функций или классов без необходимости изменять их исходный код.
# Это делает код более модульным, гибким и позволяет переиспользовать функциональность.

# Декораторы похожи на обертки вокруг функций или классов.
# Они принимают одну функцию или класс и возвращают другую функцию или класс,
# которая обычно расширяет или изменяет поведение исходной функции или класса.

# Пример декоратора для функций:
def decorator_1(func):
    # Декоратор принимает функцию func и возвращает новую функцию wrapper
    def wrapper():
        # Перед выполнением функции func, выводим сообщение
        print("До выполнения функции")
        # Вызываем функцию func
        func()
        # После выполнения функции func, выводим сообщение
        print("После выполнения функции")
        # Возвращаем wrapper
        return wrapper

    # Возвращаем новую функцию wrapper
    return wrapper


# Применение декоратора к функции:
@decorator_1
def hello():
    # Функция, к которой применяется декоратор
    print("Привет, мир!")


# Вызов функции с декоратором:
hello()


# Декораторы также можно применять к классам.

# Пример декоратора для классов:
def decorator(cls):
    # Декоратор принимает класс cls и возвращает новый класс Wrapper
    class Wrapper:
        # Инициализация нового класса Wrapper
        def __init__(self, *args, **kwargs):
            # Сохраняем экземпляр исходного класса в атрибут wrapped
            self.wrapped = cls(*args, **kwargs)

        # Определение нового метода some_method для класса Wrapper
        def some_method(self):
            # Выводим сообщение перед выполнением метода some_method исходного класса
            print("Дополнительный функционал")
            # Вызываем метод some_method исходного класса
            self.wrapped.some_method()

    # Возвращаем новый класс Wrapper
    return Wrapper


# Применение декоратора к классу:
@decorator
class MyClass:
    # Определение класса, к которому применяется декоратор
    def some_method(self):
        # Метод, который будет изменен декоратором
        print("Основной функционал")


# Создание экземпляра класса с декоратором:
my_obj = MyClass()
# Вызов метода с декоратором:
my_obj.some_method()
