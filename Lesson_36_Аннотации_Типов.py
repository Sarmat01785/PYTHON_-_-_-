# Аннотации типов в Python

# Аннотации типов используются для указания ожидаемых типов данных в функциях.
# Они полезны для статической проверки кода и улучшают его читаемость.

# Пример функции с аннотациями типов, возвращающей сумму двух целых чисел
def add_numbers(a: int, b: int) -> int:
    return a + b


# Здесь ': int' после параметров функции указывает на тип аргументов, а '-> int' - на тип возвращаемого значения.

# Пример функции, суммирующей список целых чисел с использованием аннотации List
from typing import List


def sum_numbers(numbers: List[int]) -> int:
    return sum(numbers)


# 'List[int]' указывает, что параметр 'numbers' должен быть списком целых чисел.

# Аннотации также могут быть использованы для указания необязательных типов и сложных структур данных.
from typing import Optional, Dict


# Функция с аннотацией Optional, позволяющая аргументу иметь тип 'int' или 'None'
def greet(name: Optional[str] = None) -> str:
    if name:
        return f"Hello, {name}"
    return "Hello, World"


# Функция, использующая словарь с целочисленными ключами и строковыми значениями
def process_data(data: Dict[int, str]) -> None:
    for key, value in data.items():
        print(f"Key: {key}, Value: {value}")


# Обратите внимание, что аннотации типов не применяются во время выполнения программы и не вызывают ошибок,
# если аргументы не соответствуют указанным типам. Они предназначены для статического анализа кода.

# Примеры использования функций с аннотациями типов
result = add_numbers(3, 5)
print(result)  # Выведет: 8

total = sum_numbers([1, 2, 3, 4, 5])
print(total)  # Выведет: 15

greeting = greet("Alice")
print(greeting)  # Выведет: Hello, Alice

process_data({1: "one", 2: "two"})  # Выведет: Key: 1, Value: one и Key: 2, Value: two

# Использование аннотаций типов может помочь инструментам разработки и статическим анализаторам кода,
# таким как mypy, обнаруживать потенциальные ошибки в коде до выполнения программы.
