# Декораторы в Python

# Декораторы - это функции, которые изменяют поведение других функций, не изменяя их код.
# Они особенно полезны для логирования, проверки, кэширования и т.д.

# Определение декоратора, который записывает информацию о вызове функции
def log_decorator(func):
    # Определение обертки, которая передает любые аргументы в декорируемую функцию
    def wrapper(*args, **kwargs):
        # Вывод информации о вызове функции
        print(f"Calling function {func.__name__}")
        # Вызов собственно функции с переданными аргументами и возвращение ее результата
        return func(*args, **kwargs)

    # Возврат обертки
    return wrapper


# Применение декоратора к функции, которая складывает два числа
@log_decorator
def add(a, b):
    return a + b


# Вызов декорированной функции и вывод результата
result = add(2, 3)
print(result)  # Выведет: Calling function add 5


# В этом примере декоратор log_decorator добавляет логирование к функции add.
# Когда add вызывается, сначала выполняется код декоратора, который печатает имя функции,
# а затем вызывается сама функция add.

# Пример с обработкой исключений в декораторе
def exception_handling_decorator(func):
    def wrapper(*args, **kwargs):
        try:
            # Попытка выполнить функцию
            return func(*args, **kwargs)
        except Exception as e:
            # В случае исключения выводим сообщение об ошибке
            print(f"An error occurred: {e}")

    return wrapper


# Применение декоратора к функции, которая может вызвать исключение
@exception_handling_decorator
def divide(a, b):
    return a / b


# Вызов декорированной функции и обработка возможного исключения
divide_result = divide(10, 0)
