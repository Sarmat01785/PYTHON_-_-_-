# Функция генератор и оператор yield в Python

# Функция-генератор позволяет создавать итераторы, которые генерируют значения по запросу.
# Использование оператора 'yield' приостанавливает выполнение функции, сохраняя ее состояние,
# чтобы продолжить с места остановки при следующем вызове.

# Пример функции-генератора, генерирующей последовательность чисел от 1 до N
def number_generator(N):
    i = 1
    while i <= N:
        yield i  # Возвращает текущее значение i и приостанавливает функцию
        i += 1


# Итерация по значениям, возвращаемым генератором
for number in number_generator(5):
    print(number)  # Выведет числа от 1 до 5


# Функции-генераторы полезны в ситуациях, где необходимо работать с потенциально большими
# или бесконечными последовательностями данных, так как они не требуют загрузки всех значений в память.

# Пример функции-генератора для чтения файла построчно
def read_lines(file_name):
    with open(file_name, encoding='utf-8') as file:
        for line in file:
            yield line  # Возвращает одну строку из файла


# Итерация по строкам файла с помощью генератора
for line in read_lines('text_1.txt'):
    print(line, end='')  # Выводит строки файла

# Используя функцию-генератор, мы избегаем загрузки всего содержимого файла в память,
# что особенно важно для больших файлов.

# Получение объекта-генератора из функции-генератора
p = read_lines('text_1.txt')

# Вывод первой строки файла
print(next(p))  # Выведет "Строка текста"

# Обработка исключения StopIteration, которое возникает, когда элементы генератора исчерпаны
try:
    while True:
        print(next(p))  # Выводит оставшиеся строки файла
except StopIteration:
    print('Достигнут конец файла.')  # Выводится, когда строки закончились
